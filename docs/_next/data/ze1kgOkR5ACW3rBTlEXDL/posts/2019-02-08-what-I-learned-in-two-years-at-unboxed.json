{"pageProps":{"postData":{"id":"2019-02-08-what-I-learned-in-two-years-at-unboxed","content":"<p>When I joined Unboxed in 2016 I had recently moved to the UK and was looking for\na place where I would be able to learn “what good looks like” as a software\ndeveloper.</p>\n<p>This post is inspired by Anna Shipman’s excellent <a href=\"https://www.annashipman.co.uk/jfdi/what-i-learned-in-six-years-at-gds.html\">“What I learned in six years\nat GDS”</a> which made me think about my own experience and what work patterns I\ncould extract from it. Here’s what I came up with.</p>\n<h2>1. Communicate your intent</h2>\n<p>It’s good practice to learn to justify what you’re doing to your team mates\nbefore you embark on any elaborate task. I’ve found it’s always better to\ninclude people in your decision process. You can do this either through pairing,\ntyping things out in a Slack channel or just by asking people questions\ninformally. Many times the feedback I get from my co-workers gives me new ideas\nto explore/increases my understanding on a topic/saves me time. It’s a great way\nto learn from others and it ensures you don’t step on people’s toes, especially\nif you’re just starting out on a team.</p>\n<p>Another lesson related to open communication is that it’s useful for you and\nyour co-workers to speak up about the things that make your job difficult. If\nthere’s something that bothers you, chances are it’s already bothering someone\nelse as well. And if it’s not, you might point out something that makes people\nrealise it could be better. It could be something as simple as moving noisy\nGitHub alerts out of the main dev Slack channel. Or as complicated as changing a\nbottleneck work pattern that holds up deployments.</p>\n<h2>2. TDD like you mean it</h2>\n<p>It feels like this is common knowledge and yet not everyone appreciates the\npower of a failing test. It might be because it’s really quite a boring process\nwith predictable results: you write a test, it fails, and then the code your\nwrite will eventually make it pass. Some of the time, writing a test gets\ntreated as an afterthought, something that should be done once functionality has\nalready been implemented.</p>\n<p>But using a technique like “red-green-refactor” can lessen your mental workload\nand bring your ideas into focus. It forces you to state your intent and narrows\ndown the scope of your problem to a single issue at a time.</p>\n<p>The principle of “red-green-refactor”:</p>\n<ol>\n<li>Red: Write a failing test that states your intent.</li>\n<li>Green: Be shameless about getting your test to pass.</li>\n<li>Refactor: Focus on rewriting your code to make it better.</li>\n</ol>\n<p>For a better and more eloquent explanation of why this works™ I recommend\nchecking out Tom Stuart’s <a href=\"https://confreaks.tv/videos/rubyconf2017-get-off-the-tightrope\">“Get Off the Tightrope”</a> talk.</p>\n<h2>3. Ask for help</h2>\n<p>There’s a huge advantage to learning to be ok with not knowing everything.\nMaking an active choice to ask for help is an an act of courage and not a sign\nof weakness. I’m painfully aware that I don’t do this nearly enough and I’m\ndoing my best to work on it. I know things can change quite rapidly in a project\nas I learn more about what works and what doesn’t, so I try to be flexible and\nadmit when something isn’t going as expected. By doing that I hope that my\nteammates also feel more comfortable talking about when they need help and share\ntheir pain with me.</p>\n<p>In addition, I recommend seeking out mentors that you can learn from. Try to set\nregular meetings with people that are better than you. It’s useful to remember\nthat your mentors are human too and have made more mistakes than you. So they\ndeserve your appreciation for sharing their experiences and offering you new\nperspectives.</p>\n<p>If setting up a traditional mentorship meeting isn’t an option, then consider\ntrying to learn from your peers or juniors as much as from someone more senior\nthan you. People enjoy participating and sharing ideas, so there’s no need to\nrestrict yourself to searching for that perfect all-knowing mentor. In fact, if\nthey see themselves that way it’s probably best you avoid them and search for a\nmore ego-less relationship. Getting comfortable with being vulnerable and asking\nfor help applies to your mentors as much as to you and you should appreciate\npeople who have the courage to admit they don’t know everything, are fallible,\nand are willing to learn.</p>\n<h2>4. Make things better for everybody</h2>\n<p>Whenever your job permits it, try to find ways you could improve things not just\nfor yourself but for the people around you as well. This can set the tone for\nyour co-workers to want to continue that pattern by bringing improvements of\ntheir own because it feels good to know you’ve got each other’s backs.</p>\n<p>For example: Something as small as suggesting a tool or command to speed up\nsomeone’s workflow or something more elaborate like mentoring someone to become\nmore confident. Another good example for this is when you’re starting out on a\nproject and have to go through the setup process. Make sure you write down what\npain points you have along the way so that the next person doesn’t have to do\nthe same amount of work. Perhaps there’s a README with the setup steps that you\ncould improve or a wiki page/Confluence page etc. If none of these exist, why\nnot start one? It could be as small as adding a “Setup” section to a project’s\nREADME.</p>\n<p>Another way to make things better for everyone is to try to organise activities\ntogether. I’ve found that people love interacting and exchanging ideas, as long\nas you give them a good pretext to get going. This will help both you and them\nopen up and bond, while possibly learning something along the way. Even if you\ndidn’t learn anything, you still had some fun, so win-win.</p>\n<p>Ex: At some point, I organised a book club that I found was a very good pretext\nto bounce ideas off of my reading buddy about best practices (in our case it was\nabout writing tests in RSpec). We found we got different things from the book we\nwere reading, so it was nice to share and discuss. We both felt we reached a\ndeeper understanding of our reading material.</p>\n<h2>5. Don’t be busy for the sake of being busy</h2>\n<p>I personally do my best work when I keep work and personal life separate. This\ninvolves keeping a fixed working schedule and avoiding Slack / work e-mail\noutside normal working hours. This is particularly hard when I need to stop\nmyself when I’m in the middle of working on a task. My solution is to try to\norganise my day so that I have a buffer before leaving work where I only do\nsmall tasks (usually reviews) and then close down shop for the day.</p>\n<p>Equally, it’s a good habit to try to narrow down scope when embarking on a task.\nDoing too much might slow you down or demoralise you, especially if you\nconstantly get sucked down rabbit holes. So it’s a good idea to start from the\nprinciple of doing less but doing it well.</p>\n<p>One frequent source of scope creep that I’ve encountered a lot is a tendency to\ntry to fix things that aren’t broken. If you’re running a deployment pipeline\nthat’s not hip and cool there’s no need for you to venture off into the devops\nwilderness if your current setup runs just fine and caters to your needs. It’s\nnot an exciting solution but it does free you up to focus on things that need\nyour attention and could add new tangible benefits.</p>\n<h2>TL;DR</h2>\n<p>The gist of these lessons is that knowing how to collaborate in your team and\nfocusing on being open and honest about what you’re doing are an important part\nof “what good looks like” as a software developer. That and writing tests like\nyou mean it. I’m grateful I got a chance to see that first hand during my time\nat Unboxed.</p>\n","title":"What I learned in two years at Unboxed","date":"2019-02-08","cardImagePath":"2019-02-08-sapling.jpeg","shortDescription":"Notes on lessons learned about “what good looks like” as a  software developer at Unboxed."}},"__N_SSG":true}